{"version":3,"sources":["getBikeData.js","NetworkPin.js","NetworkMarkers.js","NetworkPopup.js","NetworkMap.js","App.js","serviceWorker.js","index.js"],"names":["getBikeData","Object","asyncToGenerator","regenerator_default","a","mark","_callee","response","json","networks","wrap","_context","prev","next","fetch","sent","abrupt","stop","pinStyle","cursor","fill","stroke","CityPin","_this$props","this","props","_this$props$size","size","onClick","react_default","createElement","height","viewBox","style","objectSpread","transform","concat","d","PureComponent","NetworkMarkers","onMarkerClick","map","network","index","esm","key","longitude","location","latitude","NetworkPin_CityPin","Component","popupBodyStyle","width","fontFamily","hrStyle","borderStyle","borderColor","borderWidth","marginBlockStart","h2Style","marginBlockEnd","color","descrStyle","NetworkPopup","onClose","tipSize","anchor","closeOnClick","name","city","country","App","state","viewport","zoom","bearing","pitch","_updateViewport","_this","setState","_handleClick","_handleNetworkPopupClose","console","log","token","_this$state","assign","mapStyle","onViewportChange","mapboxApiAccessToken","NetworkMarkers_NetworkMarkers","NetworkPopup_NetworkPopup","_fetchBikeNetworks","NetworkMap_App","process","Boolean","window","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.658f6a61.chunk.js","sourcesContent":["const URL = 'http://api.citybik.es/v2/networks';\n\nexport default async ()=> {\n  const response = await fetch(URL);\n  const json = await response.json();\n  const networks = json && json.networks;\n  return networks || [];;\n}\n","import React, {PureComponent} from 'react';\n\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\n  C20.1,15.8,20.2,15.8,20.2,15.7z`;\n\nconst pinStyle = {\n  cursor: 'pointer',\n  fill: '#346F8F',\n  stroke: 'grey'\n};\n\nexport default class CityPin extends PureComponent {\n\n  render() {\n    const {size = 20, onClick} = this.props;\n\n    return (\n      <svg\n        height={size}\n        viewBox=\"0 0 24 24\"\n        style={{...pinStyle, transform: `translate(${-size / 2}px,${-size}px)`}}\n        onClick={onClick}\n      >\n        <path d={ICON}/>\n      </svg>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport {Marker} from 'react-map-gl';\nimport NetworkPin from './NetworkPin';\n\nexport default class NetworkMarkers extends Component {\n\n  render() {\n    const {networks, onMarkerClick} = this.props;\n    if (!networks) return null;\n    return (\n      networks.map((network, index) => (\n        <Marker\n          key={`${index}`}\n          longitude={network.location.longitude}\n          latitude={network.location.latitude} >\n          <NetworkPin size={20} onClick={()=> onMarkerClick(network)} />\n        </Marker>\n      )));\n  }\n}\n","import React, {PureComponent} from 'react';\nimport {Popup} from 'react-map-gl';\n\nconst popupBodyStyle = {\n  width: 240,\n  height: 160,\n  fontFamily: `\"Roboto\", \"Helvetica\", \"Arial\", sans-serif`,\n};\nconst hrStyle = {\n  borderStyle: 'solid',\n  borderColor: 'lightGrey',\n  borderWidth: '1px 0 0 0',\n  marginBlockStart: 0,\n};\nconst h2Style = {\n  marginBlockStart: 8,\n  marginBlockEnd: 8,\n  color: '#666',\n};\n\nconst descrStyle = {\n  marginBlockStart: 0,\n  marginBlockEnd: 0,\n};\nexport default class NetworkPopup extends PureComponent {\n  render() {\n    const {network, onClose} = this.props;\n    if (!network) return null;\n    return (\n      <Popup tipSize={5}\n        anchor=\"top\"\n        longitude={network.location.longitude}\n        latitude={network.location.latitude}\n        closeOnClick={false}\n        onClose={onClose} >\n        <div style={popupBodyStyle}>\n          <h2 style={h2Style}>{network.name}</h2>\n          <hr style ={hrStyle} />\n          <div style={descrStyle}>{network.location.city}</div>\n          <div style={descrStyle}>{network.location.country}</div>\n        </div>\n      </Popup>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport MapGL, {Popup, Marker, NavigationControl} from 'react-map-gl';\nimport NetworkMarkers from './NetworkMarkers';\nimport NetworkPopup from './NetworkPopup';\n\nconst navStyle = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  padding: '10px'\n};\nconst MAP_STYLE = 'mapbox://styles/mapbox/light-v9';\n\nexport default class App extends Component {\n  state = {\n    viewport: {\n      latitude: 30.785164,\n      longitude: 0,\n      zoom: 1,\n      bearing: 0,\n      pitch: 0\n    },\n  }\n\n  _updateViewport = (viewport) => {\n    this.setState({viewport});\n  }\n\n  _handleClick = (network) => {\n    this.setState({network});\n  }\n\n  _handleNetworkPopupClose = () => {\n    console.log('clicked')\n    this.setState({network: null})\n  }\n\n  render() {\n    const {token, networks} = this.props;\n    const {viewport, network} = this.state;\n    return (\n      <MapGL\n        {...viewport}\n        width=\"100%\"\n        height=\"100%\"\n        mapStyle={MAP_STYLE}\n        onViewportChange={this._updateViewport}\n        mapboxApiAccessToken={token}>\n        <NetworkMarkers networks={networks} onMarkerClick={this._handleClick}/>\n        <NetworkPopup network={network} onClose={this._handleNetworkPopupClose} />\n      </MapGL>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport getBikeData from './getBikeData';\nimport NetworkMap from './NetworkMap';\n\nconst TOKEN = process.env.REACT_APP_MAPBOX_TOKEN;\n\nexport default class App extends Component {\n  state = {\n    networks: null,\n  }\n\n  componentDidMount() {\n    this._fetchBikeNetworks()\n  }\n\n  async _fetchBikeNetworks(){\n    const networks = await getBikeData();\n    this.setState({ networks });\n  }\n\n  render() {\n    const {networks} = this.state;\n    return (\n      <NetworkMap token={TOKEN} networks={networks}/>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}